prompt --application/pages/page_00020
begin
--   Manifest
--     PAGE: 00020
--   Manifest End
wwv_flow_imp.component_begin (
 p_version_yyyy_mm_dd=>'2024.05.31'
,p_release=>'24.1.1'
,p_default_workspace_id=>10135125799703166
,p_default_application_id=>181
,p_default_id_offset=>0
,p_default_owner=>'WKSP_CIDEV'
);
wwv_flow_imp_page.create_page(
 p_id=>20
,p_name=>'#14: CASE Expressions rather than IF statements'
,p_alias=>'14-CASE-EXPRESSIONS-RATHER-THAN-IF-STATEMENTS'
,p_step_title=>'#14: CASE Expressions rather than IF statements'
,p_autocomplete_on_off=>'OFF'
,p_page_template_options=>'#DEFAULT#'
,p_protection_level=>'C'
,p_page_component_map=>'11'
);
wwv_flow_imp_page.create_page_plug(
 p_id=>wwv_flow_imp.id(38059564590293414)
,p_plug_name=>'Comparison'
,p_region_template_options=>'#DEFAULT#'
,p_plug_template=>wwv_flow_imp.id(32866742071813925)
,p_plug_display_sequence=>20
,p_location=>null
,p_plug_source=>wwv_flow_string.join(wwv_flow_t_varchar2(
'',
'    <style>',
'       ',
'        .comparison {',
'            display: flex;',
'            flex-direction: column;',
'            gap: 20px;',
'        }',
'        .statement {',
'            //background-color: #f4f4f4;',
'            padding: 15px;',
'            border: 1px solid #ccc;',
'            border-radius: 5px;',
'        }',
'        .highlight {',
'            background-color: #e2f0d9;',
'            padding: 10px;',
'            border-left: 5px solid #4caf50;',
'            color: #000',
'        }',
'        code {',
'            display: block;',
'            background: #272822;',
'            color: #f8f8f2;',
'            padding: 10px;',
'            border-radius: 5px;',
'            overflow-x: auto;',
'        }',
'    </style>',
'',
'<body>',
'    <div class="container">',
'        <h1>Oracle DB: IF Statement vs CASE Expression</h1>',
'        <div class="comparison">',
'            <div class="statement">',
'                <p><strong>Statement 1:</strong></p>',
'                <p>Sure, you could write an IF statement and that''s not soooo bad, but CASE is, in many situations, a cleaner, more readable, more maintainable choice.</p>',
'            </div>',
'            <div class="statement">',
'                <p><strong>Traditional Approach: Use IF</strong></p>',
'                <code>',
'                    CREATE OR REPLACE FUNCTION grade_translator (grade_in IN VARCHAR2)  ',
'                    RETURN VARCHAR2  ',
'                    IS  ',
'                       retval   VARCHAR2 (100);  ',
'                    BEGIN  ',
'                       IF grade_in = ''A''  ',
'                       THEN  ',
'                          retval := ''Excellent'';  ',
'                       ELSIF grade_in = ''B''  ',
'                       THEN  ',
'                          retval := ''Very Good'';  ',
'                       ELSIF grade_in = ''C''  ',
'                       THEN  ',
'                          retval := ''Good'';  ',
'                       ELSIF grade_in = ''D''  ',
'                       THEN  ',
'                          retval := ''Fair'';  ',
'                       ELSIF grade_in = ''F''  ',
'                       THEN  ',
'                          retval := ''Poor'';  ',
'                       ELSE  ',
'                          retval := ''No such grade'';  ',
'                       END IF;  ',
'                      ',
'                       RETURN retval;  ',
'                    END;  ',
'                    Function created.',
'                </code>',
'            </div>',
'            <div class="statement">',
'                <p><strong>Statement 2: The CASE Version</strong></p>',
'                <code>',
'                    CREATE OR REPLACE FUNCTION grade_translator (grade_in IN VARCHAR2)  ',
'                    RETURN VARCHAR2  ',
'                    IS  ',
'                       retval   VARCHAR2 (100);  ',
'                    BEGIN  ',
'                       CASE  ',
'                          WHEN grade_in = ''A''  ',
'                          THEN  ',
'                             retval := ''Excellent'';  ',
'                          WHEN grade_in = ''B''  ',
'                          THEN  ',
'                             retval := ''Very Good'';  ',
'                          WHEN grade_in = ''C''  ',
'                          THEN  ',
'                             retval := ''Good'';  ',
'                          WHEN grade_in = ''D''  ',
'                          THEN  ',
'                             retval := ''Fair'';  ',
'                          WHEN grade_in = ''F''  ',
'                          THEN  ',
'                             retval := ''Poor'';  ',
'                          ELSE  ',
'                             retval := ''No such grade'';  ',
'                       END CASE;  ',
'                      ',
'                       RETURN retval;  ',
'                    END;  ',
'                    Function created.',
'                </code>',
'            </div>',
'            <div class="statement">',
'                <p><strong>Statement 3:</strong></p>',
'                <code>',
'                    BEGIN ',
'                       DBMS_OUTPUT.put_line (grade_translator (''A'')); ',
'                    END; ',
'                    Excellent',
'                </code>',
'            </div>',
'            <div class="statement highlight">',
'                <p><strong>Statement 4:</strong></p>',
'                <p>Once you switch to a CASE expression, you have more options about where and how to write your code. In this case, I now embed the function''s logic entirely within the RETURN statement.</p>',
'                <p><strong>Even More Concise - CASE within RETURN!</strong></p>',
'                <code>',
'                    CREATE OR REPLACE FUNCTION grade_translator (grade_in IN VARCHAR2)  ',
'                    RETURN VARCHAR2  ',
'                    IS  ',
'                    BEGIN  ',
'                       RETURN CASE grade_in  ',
'                                 WHEN ''A'' THEN ''Excellent''  ',
'                                 WHEN ''B'' THEN ''Very Good''  ',
'                                 WHEN ''C'' THEN ''Good''  ',
'                                 WHEN ''D'' THEN ''Fair''  ',
'                                 WHEN ''F'' THEN ''Poor''  ',
'                                 ELSE ''No such grade''  ',
'                              END;  ',
'                    END;  ',
'                    Function created.',
'                </code>',
'            </div>',
'            <div class="statement">',
'                <p><strong>Statement 5:</strong></p>',
'                <code>',
'                    BEGIN ',
'                       DBMS_OUTPUT.put_line (grade_translator (''A'')); ',
'                    END; ',
'                    Excellent',
'                </code>',
'            </div>',
'            <div class="statement highlight">',
'                <p><strong>Statement 6:</strong></p>',
'                <p>This variation shows that you don''t have to simply "match" a value in the WHEN clause - you can include entire Boolean expressions in each WHEN.</p>',
'                <p><strong>CASE with Searched Expression</strong></p>',
'                <code>',
'                    DECLARE -- Example of CASE searched expression  ',
'                       cant_play_now   BOOLEAN;  ',
'                       how_young INTERVAL YEAR TO MONTH  ',
'                             := (SYSDATE - TO_DATE (''09-23-1958'', ''MM-DD-YYYY'')) YEAR TO MONTH;  ',
'                       max_age         CONSTANT INTERVAL YEAR TO MONTH := INTERVAL ''16'' YEAR;  ',
'                       min_age         CONSTANT INTERVAL YEAR TO MONTH := INTERVAL ''70'' YEAR;  ',
'                     ',
'                       PROCEDURE must_go_to_work ',
'                       IS ',
'                       BEGIN ',
'                          DBMS_OUTPUT.PUT_LINE (''Oh well....''); ',
'                       END; ',
'                    BEGIN  ',
'                       -- Notice: no semi-colons between WHEN clauses.  ',
'                       cant_play_now :=  ',
'                          CASE  ',
'                             WHEN how_young < min_age THEN FALSE  ',
'                             WHEN how_young > max_age THEN FALSE  ',
'                             ELSE TRUE  ',
'                          END;  ',
'                      ',
'                       IF cant_play_now  ',
'                       THEN  ',
'                          must_go_to_work;  ',
'                       END IF;  ',
'                    END;',
'                    Statement processed.',
'                </code>',
'            </div>',
'            <div class="statement highlight">',
'                <p><strong>Statement 7:</strong></p>',
'                <p>Another demonstration of the power of a CASE expression: you can nest them! If I took this statement apart and expressed it within multiple IF statements, it would certainly work the same, but code volume would increase.</p>',
'                <p><strong>CASE with Embedded CASE</strong></p>',
'                <code>',
'                    CREATE OR REPLACE FUNCTION days_in_period_str (period_in   IN VARCHAR2 ',
'                                                                 , days_in     IN PLS_INTEGER) ',
'                       RETURN VARCHAR2 ',
'                    IS ',
'                    BEGIN ',
'                       /* ',
'                       1. If days_in is 1, then use singular, else use plural for period ',
'                       (add an "s" to "day" in output). ',
'                     ',
'                       2. If days_in is NULL, then display "No days in <period_in>". ',
'                       */ ',
'                       RETURN CASE ',
'                                 WHEN days_in IS NULL THEN ''No'' ',
'                                 WHEN days_in = 1 THEN ''One'' ',
'                                 ELSE TO_CHAR (days_in) ',
'                              END ',
'                              || '' '' ',
'                              || CASE days_in WHEN 1 THEN ''day'' ELSE ''days'' END ',
'                              || '' in '' ',
'                              || period_in; ',
'                    END; ',
'                    Function created.',
'                </code>',
'            </div>',
'            <div class="statement">',
'                <p><strong>Statement 8:</strong></p>',
'                <code>',
'                    BEGIN ',
'                       DBMS_OUTPUT.put_line (days_in_period_str (''Month'', 1)); ',
'                       DBMS_OUTPUT.put_line (days_in_period_str (''Month'', 2)); ',
'                       DBMS_OUTPUT.put_line (days_in_period_str (''Month'', NULL)); ',
'                    END; ',
'                    One day in Month',
'                    2 days in Month',
'                    No days in Month',
'                </code>',
'            </div>',
'        </div>',
'    </div>',
'',
''))
,p_attributes=>wwv_flow_t_plugin_attributes(wwv_flow_t_varchar2(
  'expand_shortcuts', 'N',
  'output_as', 'HTML')).to_clob
);
wwv_flow_imp_page.create_page_plug(
 p_id=>wwv_flow_imp.id(192294042662220218)
,p_plug_name=>'Information'
,p_region_template_options=>'#DEFAULT#'
,p_plug_template=>wwv_flow_imp.id(32866742071813925)
,p_plug_display_sequence=>10
,p_location=>null
,p_plug_source=>wwv_flow_string.join(wwv_flow_t_varchar2(
'    <div>',
'        <h1>Case Espressions instead of IF Statements</h1>',
'        <ul class="container">',
'            <li>Aim to use Case expression instead of IF/Elsif statments</li>',
'            <li>Create a help page as modal, and use the nav bar list to display icon and link to modal page, pass in "&APP(ESC)_PAGE_ID."</li>',
'            <li>Case Expressions can be used in assignments, expressions, and arguments</li>',
'            <li>Try to avoid calling funtions that represent buiness rules inside a where clause, and instead only in the select</li>',
'            <li><a href="https://livesql.oracle.com/apex/livesql/file/content_CC2C6F9H6JDQ0K3NOHKGB23FQ.html"> LiveSQL.Oracle Explanation</a></li>',
'        </ul>',
'    </div>',
'',
''))
,p_attributes=>wwv_flow_t_plugin_attributes(wwv_flow_t_varchar2(
  'expand_shortcuts', 'N',
  'output_as', 'HTML')).to_clob
);
wwv_flow_imp.component_end;
end;
/
